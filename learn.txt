Therory
# interpolation: insertion of some content into the object like string itself
done using `$(content to be evaluated eg. 2+2)`

# add "start": "nodemon index.js" inside script of package

#app.all('/user',function(){});
here all will accept all the method like put,post,get etc. for the '/user' url

#if a package is required in multiple files then it'll not be created sepertaly multiple times rather it'll be just a single instance of the package

#action
action taken for a route. eg. as follows
app.get('/user',function(){});

#controller
many actions in file is known as controller i.e. set of actions.

#app.set
it is an object where we can set various properties like views, view engine


#to create a page
  i) add a page in route including express, router
 ii) add the route to main route using router.use() 
iii) add it's controller
 iv) add views of the page
  v) render using action in the controller and export it so that it can be used in the route

#connecting backend server with database
  M- I. Connecting with MongoDB native driver
  M-II. Connecting with Mongoose
  https://zellwk.com/blog/local-mongodb/




#authentication
  cookie working
  1. create user (sign up)
  2. create session (sign in)
  3. show details of signed in user
  4. sign out
  
  **Always store the cookie in DB too else all the users will be logged out bcz of cookie not stored in the server and hence authentication fails
      TO do that, mongostore and a library connect-mongo

  **In manual authentication, there are loop holes like going back to the sign in page if we are alreasy sign in
    show user name and email on the profile page
    user acces to profile then only show else take back to sign in page

#authentication using passport js
  npm install passport
  npm install passport-local  //for username nd password
  passport.js uses session cookie(stores all the session info and it's encrypted)
  create a configuration file for passport including following
      require passport and passport-local Startegy
      add it as a middleware passport.use(new Startegy, callback function)
      Inside callback function, userField and password matching, email finding et. is done 
      serialize user function and deserialize user function
      export passport
  Express session library encrypts and stores in cookie done by passport
  so include express-session library, passport, passport-local in the server index.js
  

Fetching whole user to display desired data only
Mongoose populate is used






for scalabilty make differnt directory like
routes: contains home profile etc
controller: 
views
models:schemas etc.
config

initiate the project as git repository asap to track changes

install express and fireup the server

use const variables so that it doesn't get overridden 
by default on a production level port 80 is used

some urls have some common part so like profile,message etc. then keep it in some other routes under the common name
/users/profile or /users/create then keep all these routes in users.js
so basically we are separating the controller and routes
In controller folder index.js route will take to the differnet routes

Express Router
It's a module

create a router using express.Router() in index.js-controller
create a home controller
import this controller into router
now router will access to the home_controller exported functions
so basically server to a router to differnet controllers and from there to differnet actions


#setting up views
html skelton will be sent from a html file using views engine EJS

Creating post page
Create a DB Schema
Create a form
Set posts_controller
set routes of it

render posts from database
require db model
Post.find({},function(err, post){}) // it fetches all the post

Show the user one who posted
Use mongoose populate
Post.find({}).populate.exec(callbackFunctionGoesHereWith Arg err and post)

restricting user to post without sign in
M-1 show the form to those who has signed in
if(locals.user){form here}
but the problem here is that if the user knows that after signing in user the content is sent to which url
then from developer tool user can create a form and can send the details to that url without signing in 
so the solution is to put a check at the route level that before going to the controller check authentication for posting to db